package com.stone.rosetta.jdbc;

import com.stone.rosetta.repository.RowMapper;
import com.stone.rosetta.repository.ExcutablePrepareStatement;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class JdbcHelper {

    private static JdbcHelper jdbcHelper;

    private JdbcHelper(){}

    public static JdbcHelper getJdbcHelper() throws ClassNotFoundException {
        if(jdbcHelper == null){
            Class.forName("com.mysql.cj.jdbc.Driver");
            jdbcHelper = new JdbcHelper();
        }
        return jdbcHelper;
    }

    private Connection connection;

    private Connection getConnection() throws SQLException {
        if(connection == null || connection.isClosed()){
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/u06bht", "U06bHt", "U06bHt");
            System.out.println("connection created: "+connection.getMetaData().getURL());
        }
        return connection;
    }


    private PreparedStatement prepareStatementWithAutoGeneratedKey(String sql) throws SQLException {
        return getConnection().prepareStatement(sql, 1);
    }


    public Long insert(String sql, ExcutablePrepareStatement excutablePrepareStatement ) throws SQLException {
        return executeInsertPrepareStatement(
                excutablePrepareStatement.execute(
                        prepareStatementWithAutoGeneratedKey(sql)));
    }

    public int update(String sql, ExcutablePrepareStatement excutablePrepareStatement ) throws SQLException {
        return executeUpdatePrepareStatement(
                excutablePrepareStatement.execute(
                        prepareStatement(sql)));
    }

    public <T> List<T> findAll(String sql, RowMapper<T> rowMapper) throws SQLException {
        return executeAndGetResultSet(prepareStatement(sql), rowMapper);
    }
    
    public <T> List<T> findAllBy(String sql, ExcutablePrepareStatement ps, RowMapper<T> rowMapper) throws SQLException {
        return executeAndGetResultSet(ps.execute(prepareStatement(sql)), rowMapper);
    }


    public <T> T findById(String sql, ExcutablePrepareStatement excutablePrepareStatement, RowMapper<T> rowMapper) throws SQLException {
        return executeAndGetSingleResultSet(excutablePrepareStatement.execute(prepareStatement(sql)), rowMapper);
    }

    private <T> List<T> executeAndGetResultSet(PreparedStatement preparedStatement, RowMapper<T> rowMapper) throws SQLException {
        ResultSet resultSet = preparedStatement.executeQuery();
        List<T> list = new ArrayList<>();
        while(resultSet.next())
            list.add(rowMapper.map(resultSet));
        preparedStatement.closeOnCompletion();
        preparedStatement.getConnection().close();
        return list;
    }

    private <T> T executeAndGetSingleResultSet(PreparedStatement preparedStatement, RowMapper<T> rowMapper) throws SQLException {
        ResultSet resultSet = preparedStatement.executeQuery();
        T t = null;
        if(resultSet.next())
            t = rowMapper.map(resultSet);
        preparedStatement.closeOnCompletion();
        preparedStatement.getConnection().close();
        return t;
    }

    private int executeUpdateQuery(String sql, ExcutablePrepareStatement excutablePrepareStatement ) throws SQLException {
        return executeUpdatePrepareStatement(
                excutablePrepareStatement.execute(
                        prepareStatement(sql)));
    }

    private PreparedStatement prepareStatement(String sql) throws SQLException {
        return getConnection().prepareStatement(sql);
    }


    private int executeUpdatePrepareStatement(PreparedStatement preparedStatement) throws SQLException {
        int rows = preparedStatement.executeUpdate();
        preparedStatement.closeOnCompletion();
        preparedStatement.getConnection().close();
        return rows;
    }

    private Long executeInsertPrepareStatement(PreparedStatement preparedStatement) throws SQLException {
        Long id = null;
        if(preparedStatement.executeUpdate() > 0){
            ResultSet resultSet = preparedStatement.getGeneratedKeys();
            if(resultSet.next()){
                id = resultSet.getLong(1);
            }
        }
        preparedStatement.closeOnCompletion();
        preparedStatement.getConnection().close();
        return id;
    }
}
